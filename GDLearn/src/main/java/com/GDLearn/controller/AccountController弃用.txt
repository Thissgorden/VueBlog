package com.GDLearn.controller;

import cn.hutool.core.lang.Assert;
import cn.hutool.core.map.MapUtil;
import cn.hutool.crypto.SecureUtil;
import com.GDLearn.dto.LoginDto;
import com.GDLearn.entity.User;
import com.GDLearn.lang.Result;
import com.GDLearn.service.UserService;
import com.GDLearn.util.JwtUtils;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.RequiresAuthentication;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

//shiro的Controller 弃用
public class AccountController弃用 {
    @Autowired
    UserService userService;

    @Autowired
    JwtUtils jwtUtils;

    @PostMapping("/login")
    public Result login(@Validated @RequestBody LoginDto dto, HttpServletResponse response){

        //进入到此方法
        User user = userService.getOne(new QueryWrapper<User>().eq("username", dto.getUsername()));
        //非空判断
        //Assert.notNull(user,"用户不存在");
        if(user==null)return Result.fail("用户不存在");

        if(!user.getPassword().equals(SecureUtil.md5(dto.getPassword())))return Result.fail("密码错误");

        String jwt = jwtUtils.generateToken(user.getUsername());

        response.setHeader("Authorization",jwt);//将生成的JWT放入respone
        response.setHeader("Access-control-Expose-Headers","Authorization");

        return Result.sucess(MapUtil.builder()
                .put("id",user.getId())
                .put("username",user.getUsername())
                .put("avatar",user.getAvatar())
                .put("email",user.getEmail())
                .map()
        );
    }

    @RequiresAuthentication
    @GetMapping("/logout")
    public Result logout(){
        SecurityUtils.getSubject().logout();
     return Result.sucess(null);
    }
}
